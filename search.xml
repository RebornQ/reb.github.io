<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[推荐几个能自动转换粘贴内容为Markdown的工具]]></title>
    <url>%2Fposts%2F48ffa897.html</url>
    <content type="text"><![CDATA[背景今天在转载几篇文章的时候，看到别人的博文写的不错，想要转载到自己博客里。但是由于我们是自己搭建的博客，发表的文章都是以源码方式编辑的，没法一键转载。于是我就想到复制粘贴的时候能不能自动转换粘贴内容为Markdown呢？（其实还是hexo 博客神速转载这篇文章给我的启发）一开始我是在试用为知的一个插件预览Wiz.Editor.md预览地址：http://akof1314.github.io/Wiz.Editor.md/后来发现用着用着感觉有点问题，觉得很不爽，弃用。紧接着我脑子一热就想自己写一个。。。（好吧，最近项目比较多，这个得搁置一段时间了）于是去github上找了一下，不负所望，这类工具还是有的！介绍这几个工具基本都有在线预览，使用的时候直接预览就好了，如果自己需要整合源码进自己项目的话，就去下源码吧！2MD推荐指数：☆☆☆☆☆源码：https://github.com/phodal/2md原文：http://www.sohu.com/a/134631771_385076预览地址：https://phodal.github.io/2mdclipboard2markdown推荐指数：☆☆☆☆（因为操作没有2MD和界面好，所以就低一星）源码：https://github.com/euangoddard/clipboard2markdown预览地址：http://euangoddard.github.io/clipboard2markdown/咳～这个…因为预览地址是http的，iframe在Chrome会直接空白，所以换上预览图。。。。点击预览图可直接跳转到预览页面哦🌚！paste-as-markdown推荐指数：Umm…没有预览我懒得下了，没有指数哈哈哈！源码：https://github.com/letiantian/paste-as-markdown原文：https://my.oschina.net/letiantian/blog/754905]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Disqus API科学评论大法]]></title>
    <url>%2Fposts%2Fd32fb564.html</url>
    <content type="text"><![CDATA[背景Disqus 不用说，大家都知道他的主域名disqus.com在国内被屏蔽了，导致在国内不能评论也不能看评论，体验十分不好。看了一下 Disqus 官方发现有个 API 反代加速访问的用法，于是去找了相关资料，原本想自己造轮子，后来发现已经有现成的，我就先拿来用着吧。原理我们可以来看看disqus反向代理的原理图：整体流程是这样的，在前端页面上测试disqus加载是否成功，如果成功则显示disqus的评论框，反之加载独立的评论框，并将请求发送给自己在国外的vps，利用vps做反向代理，接收来自客户端的请求到disqus服务器并再转发给客户端。一句话概括就是：客户端发送请求给服务器，服务器通过Disqus Api提交评论。工具介绍目前现成的disqus反代主要有以下两种：disqus-proxy –NodeJS实现disqus-php-api –PHP实现上述两种方案均支持根据网络情况判断加载简易/原版评论框，看完UI后我很果断的选择了disqus-php-api……以下为替换为disqus-php-api的具体步骤，供大家参考，也给自己留下一个记录。配置一台国外的VPS服务器后端配置获取 disqus-php-apigit clone https://github.com/fooleap/disqus-php-api.git 移动并重命名mv -r disqus-php-api /path/to/disqus-php-api 注意：此处建议新建一个 Nginx 站点，如：api.xxx.com这类，专门放 API 的地方，注意DNS解析添加A记录和写好 Nginx 配置，尤其是要配置SSL证书。修改 config.php根据 disqus-php-api/api/config.php 中的注释修改相应配置：define(&#39;DISQUS_PUBKEY&#39;, &#39;E8Uh5l5fHZ6gD8U3KycjAIAk46f68Zw7C6eW8WSjZvCLXebZ7p0r1yrYDrLilk2F&#39;); define(&#39;PUBLIC_KEY&#39;, &#39;your-public-key&#39;); define(&#39;SECRET_KEY&#39;, &#39;your-secret-key&#39;); define(&#39;DISQUS_USERNAME&#39;, &#39;your-disqus-username&#39;); define(&#39;DISQUS_EMAIL&#39;, &#39;your-email@gmail.com&#39;); define(&#39;DISQUS_PASSWORD&#39;, &#39;your-disqus-password&#39;); define(&#39;DISQUS_WEBSITE&#39;, &#39;https:/\/your-website.com&#39;); // 实际使用时要去掉链接的 \ ，这里是为了避免md直接吧双斜杠解析成注释了 define(&#39;DISQUS_SHORTNAME&#39;, &#39;your-disqus-shortname&#39;); define(&#39;DISQUS_APPROVED&#39;, true); 这里要注意的是，DISQUS_WEBSITE选项中，域名不能这样写：‘https://reb.mallotec.com/‘，域名后不能以’/‘结尾，否则会出现一直创建Thread的情况前端配置disqus-php-api集成至hexo修改 hexo 的主题配置文件在主题配置文件_config.yml中添加 disqusapi 相关参数disqusapi: forum: &#39;your-short-name&#39; site: &#39;https://your-site&#39; api: &#39;https://your-site/.../disqus-php-api/api&#39; mode: 1 badge: &#39;博主&#39; timeout: 3000 参数参考文档：https://github.com/fooleap/disqus-php-api/blob/master/readme.mdforum：Disqus form的shortnamesite：网站域名api：PHP代码部署的网址：https://yoursite.com/disqus/apimode：1 检测能否访问 Disqus，若能则加载 Disqus 原生评论框，超时则加载简易评论框2 仅加载简易评论框3 同时加载两种评论框，先显示简易评论框，Disqus 加载完成则切换至 Disqus 评论框badge：管理员徽章文本timeout：当mode为1时的超时时间添加 disqusapi 模块Material主题的 disqusapi 模块添加可以参考官方文档的评论系统适配指南。直接拷贝一份官方提供的 disqus 评论模块到&lt;主题根目录&gt;/layout/_widget/comment/disqusapi/下。下面是common.ejs、enter.ejs、main.ejs的具体代码：common.ejs &lt;!-- 使用 DISQUS js 代码 --&gt; common.ejs为空enter.ejs &lt;!-- 使用 DISQUS --&gt; &lt;% if(page.comments) {%&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/disqus-php-api-dist/iDisqus.min.css&quot; /&gt; &lt;script src=&quot;/disqus-php-api-dist/iDisqus.min.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;comment&quot;&gt; &lt;%- partial(&#39;_widget/comment/&#39; + theme.comment.use + &#39;/main&#39;) %&gt; &lt;/div&gt; &lt;style&gt; #comment{ background-color: #eee; padding: 2pc; } &lt;/style&gt; &lt;% } %&gt; page.comments是为了控制每一篇文章是否需要开启评论功能，需要在每一篇文章的Front-matter中设置comments={Boolean}如果服务器很远，连接比较慢，建议把iDisqus.min.css和iDisqus.min.js放到主题目录的source里会更方便，渲染调试的时候直接从本地加载，不然调试的时候从网络加载半年网页都没加载完。当然，放到了CDN那更好，此处主要是为了方便hexo s调试。main.ejs&lt;script&gt; var emojiList = [{ code:&#39;smile&#39;, title:&#39;笑脸&#39;, unicode:&#39;1f604&#39; },{ code:&#39;mask&#39;, title:&#39;生病&#39;, unicode:&#39;1f637&#39; },{ code:&#39;joy&#39;, title:&#39;破涕为笑&#39;, unicode:&#39;1f602&#39; },{ code:&#39;stuck_out_tongue_closed_eyes&#39;, title:&#39;吐舌&#39;, unicode:&#39;1f61d&#39; },{ code:&#39;flushed&#39;, title:&#39;脸红&#39;, unicode:&#39;1f633&#39; },{ code:&#39;scream&#39;, title:&#39;恐惧&#39;, unicode:&#39;1f631&#39; },{ code:&#39;pensive&#39;, title:&#39;失望&#39;, unicode:&#39;1f614&#39; },{ code:&#39;unamused&#39;, title:&#39;无语&#39;, unicode:&#39;1f612&#39; },{ code:&#39;grin&#39;, title:&#39;露齿笑&#39;, unicode:&#39;1f601&#39; },{ code:&#39;heart_eyes&#39;, title:&#39;色&#39;, unicode:&#39;1f60d&#39; },{ code:&#39;sweat&#39;, title:&#39;汗&#39;, unicode:&#39;1f613&#39; },{ code:&#39;smirk&#39;, title:&#39;得意&#39;, unicode:&#39;1f60f&#39; }]; var disq = new iDisqus(&#39;comment&#39;, { forum: &#39;&lt;%= theme.disqusapi.forum %&gt;&#39;, site: &#39;&lt;%= theme.disqusapi.site %&gt;&#39;, api: &#39;&lt;%= theme.disqusapi.api %&gt;&#39;, mode: &#39;&lt;%= theme.disqusapi.mode %&gt;&#39;, badge: &#39;&lt;%= theme.disqusapi.badge %&gt;&#39;, timeout: &#39;&lt;%= theme.disqusapi.timeout %&gt;&#39;, init: true, emoji_list: emojiList }); disq.count(); &lt;/script&gt; 最后编辑主题配置文件中的comment模块开启disqusapi：comment: use: disqusapi 问题1.没有权限参考：https://blog.fooleap.org/disqus-php-api.html#comment-3954303091Linux查看、修改文件读写权限问题如图：据作者 fooleap 所说，显示没有权限的话，就是没有权限在当前目录创建文件夹。于是我修改了 api 所在目录的权限就好了：sudo chown -R $USER:$USER path/to/disqus-php-api sudo chmod -R 777 path/to/disqus-php-api 2.由于disqus没有本页面的项管thread，故需先创建thread参考：https://blog.fooleap.org/disqus-php-api.html#comment-3829428059据作者 fooleap 所说，加载评论框的页面，若在 Disqus 没有相关的 thread，是必须先手动创建的，不设置成自动是避免生成无用的 thread。若想自动创建可以在配置参数里添加autoCreate: true。还有一种解决方法（推荐）：如果出现创建thread的问题，那么可以通过 mode选择1，再翻墙访问你的文章页面，这时候加载原生Disqus评论系统，thread就创建成功了。特别要注意的是：如果你的文章标题中带有中文，会无法创建thread，所以不要使用中文命名文章。参考链接解决Hexo博客中 Disqus 在国内不能访问的方案Hexo折腾记之科学使用Disqus与Next的集成disqus-php-api 科学评论科学使用 Disqus为Hexo主题fexo添加disqus反代〖原创〗基于disqus-php-api在Hexo博客中使用Disqus]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试专页]]></title>
    <url>%2Fposts%2Fb84ba97.html</url>
    <content type="text"><![CDATA[测试的英文？（全小写） Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加Disqus评论]]></title>
    <url>%2Fposts%2F2cb4e595.html</url>
    <content type="text"><![CDATA[背景国内的评论系统畅言都需要ICP备案，像我这种打死不备案的人来说，国内的评论系统就用不了了。最终决定博客使用的是国外的 Disqus 评论系统，但他的主域名disqus.com在国内被屏蔽了，只能科学上网后使用。果然有空还是自己造轮子爽一点，逃～配置 DisqusDisqus官网：https://disqus.com打开链接后， 可以直接用Facebook，Twitter以及 Google 登录，也可以用邮箱注册后登录。选择创建目的登录后，点击首页的GET STARTED 按钮，然后点击图示按钮：创建一个新站点Website Name 填的是shortname，到时候要填到主题配置文件中Category 选择种类，我选的是 Tech安装Select Plan接下来你会看到以下页面：这一步不需要选计划，跳过Select Plan，直接到Install Disqus。Install DisqusSelect PlatformHexo 不属于以上任何形式，因此选择Universal Code(通用代码)。Install Instructions然后拉到最下面选择ConfigureConfigure DisqusWebsite Name 一般就刚刚第一步填的short name（我刚刚填了 justtestme，到这步的时候一般会自动填充）Website URL 填写你的博客地址填完信息后点击Complete Setup完成配置。配置 Hexo在主题配置文件中找到comment项：（以 Material 主题为例）# Comment Systems # Available value of &quot;use&quot;: # disqus | disqus_click | changyan | 163gentie comment: use: disqus_click shortname: justtestme # duoshuo or disqus shortname use：选择disqus或disqus_click，两者差别请参阅Material主题文档shortname：填写你刚刚在 Disqus 设置的 Website Name，英文冒号后空格。（严格意义上是填站点配置面板中的 Shortname ）部署应用使用如下命令提交到服务器：hexo clean hexo g hexo d 科学上网后，任意打开一篇你的博文就能评论了。总结在https://justtestme.disqus.com/admin/settings/general/页面管理 Your Sites（ justtestme 换成自己的 shortname ）。此处的 Shortname 和 Websit Name 是可以不同的。如下图：注意：主题配置文件中comment项填的是此处的 Shortname 而不是 Website Name！！参考Hexo搭建博客系列：（六）Hexo添加Disqus评论]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac使用brew安装的MySQL版本切换]]></title>
    <url>%2Fposts%2Fa96dbfbe.html</url>
    <content type="text"><![CDATA[参考：https://www.jianshu.com/p/f1a5a680b464☆☆20180801更新：通过测试发现直接使用brew services start mysql@5.6即可切换至5.6版本使用，不需要brew unlink，是否可用请自行测试，测试前请备份好数据！！☆☆背景今天因为要写JavaEE大作业运行了一遍队友发过来的项目，却无法正常运行。经过一番追踪，发现是MySQL版本不对的问题，项目使用的MySQL版本是5.6（从使用的JDBC驱动就可以看出来）。本来想着更新JDBC驱动就可以解决，却发现Hibernate也要更新，还不清楚Hibernate支不支持8.0的MySQL，想了一下还是决定装多一个版本的MySQL吧。切换重点/usr/local/var/mysql/通过切换每个版本来使用数据库设置和数据使用brew unlink和brew link切换活动版本的MySQL教程摘要下面我们来看一下大概流程：停止运行MySQL在设置和数据目录（usr/local/var/mysql）之间切换brew unlink并brew link与切换活动的MySQL启动MySQL详细步骤本例以已安装MySQL 8.0再安装5.6 为例1. 备份/usr/local/var/mysql/由于存储了设置和DB数据，因此应该备份好，然后撤离。 mv /usr/local/var/mysql /usr/local/var/mysql_80 2. 删除MySQL 8.0的符号链接brew unlink mysql 解释：这个符号链接 指的是诸如/usr/local/bin/mysql -&gt; ../Cellar/mysql/5.7.10/bin/mysql 和/usr/local/lib/libmysqlclient.20.dylib -&gt; ../Cellar/mysql/5.7.10/lib/libmysqlclient.20.dylib 之类的东西。注意：如果此符号链接存在，安装另一个版本将可能导致以下错误：$ brew install mysql56 ==&gt; Reinstalling homebrew/versions/mysql56 ==&gt; Downloading https://homebrew.bintray.com/bottles-versions/mysql56-5.6.27.el_capitan.bottle.tar.gz Already downloaded: /Library/Caches/Homebrew/mysql56-5.6.27.el_capitan.bottle.tar.gz ==&gt; Pouring mysql56-5.6.27.el_capitan.bottle.tar.gz Error: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink bin/innochecksum Target /usr/local/bin/innochecksum is a symlink belonging to mysql. You can unlink it: brew unlink mysql To force the link and overwrite all conflicting files: brew link --overwrite mysql56 To list all files that would be deleted: brew link --overwrite --dry-run mysql56 或：$ brew install mysql56 Updating Homebrew... ==&gt; Auto-updated Homebrew! Updated 1 tap (homebrew/cask). No changes to formulae. ==&gt; Downloading https://homebrew.bintray.com/bottles/mysql@5.6-5.6.40.sierra.bottle.tar.gz ######################################################################## 100.0% ==&gt; Pouring mysql@5.6-5.6.40.sierra.bottle.tar.gz ==&gt; /usr/local/Cellar/mysql@5.6/5.6.40/bin/mysql_install_db --verbose --user=xxx --basedir=/usr/local/Cellar/mysql@5.6/5.6.40 --datadir=/usr/local/var/mysql --tmpdir=/tmp ==&gt; Caveats A &quot;/etc/my.cnf&quot; from another install may interfere with a Homebrew-built server starting up correctly. MySQL is configured to only allow connections from localhost by default To connect: mysql -uroot This formula is keg-only, which means it was not symlinked into /usr/local, because this is an alternate version of another formula. If you need to have this software first in your PATH run: echo &#39;export PATH=&quot;/usr/local/opt/mysql@5.6/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc For compilers to find this software you may need to set: LDFLAGS: -L/usr/local/opt/mysql@5.6/lib CPPFLAGS: -I/usr/local/opt/mysql@5.6/include To have launchd start mysql@5.6 now and restart at login: brew services start mysql@5.6 Or, if you don&#39;t want/need a background service you can just run: /usr/local/opt/mysql@5.6/bin/mysql.server start ==&gt; Summary 🍺 /usr/local/Cellar/mysql@5.6/5.6.40: 340 files, 154.0MB 3. 安装MySQL 5.6很简单，执行以下命令即可：brew install mysql56 安装后记得导入环境变量：echo &#39;export PATH=&quot;/usr/local/opt/mysql@5.6/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc 附录：Mac通过brew安装MySQL后详细配置过程4. 分配MySQL 5.6链接安装MySQL 5.6之后，执行以下命令：brew unlink mysql &amp;&amp; brew link mysql@5.6 --force 注意：尽管可以通过执行链接来重新分配链接，但最好首先清除链接，因为发出大量日志很难发现错误。--force参数看具体情况使用，若brew link mysql@5.6不提示要强制链接的话就不需要该参数了。5. 启动MySQL 5.6并检查版本用brew启动brew services start mysql@5.6 或mysql.server start 检查版本：$ mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 1 Server version: 5.6.40 Homebrew Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. mysql&gt; 从日志可以确认MySQL 5.6启动。如果版本中显示5.7，我们要检查日志等，因为有可能无法替换符号链接。6. 停止MySQL 5.6服务并保存数据$ mysql.server stop Shutting down MySQL . SUCCESS! $ mv /usr/local/var/mysql /usr/local/var/mysql_56 7. 恢复最初安装的MySQL 5.7启动$ mv /usr/local/var/mysql_80 /usr/local/var/mysql $ brew unlink mysql56 &amp;&amp; brew link mysql Unlinking /usr/local/Cellar/mysql56/5.6.40... 99 symlinks removed Linking /usr/local/Cellar/mysql/8.0.11... 79 symlinks created $ mysql.server start Starting MySQL . SUCCESS! $ mysql -u root Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 2 Server version: 8.0.11 Homebrew Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement. mysql&gt; 从日志可以确认MySQL 8.0启动。疑难解答/usr/local/var/mysql/为什么有必要切换如果至少启动一次8.0，如果使用相同的数据运行5.6，将出现以下错误： Starting MySQL . ERROR! The server quit without updating PID file (/usr/local/var/mysql/xxx.local.pid). 由于mysqld等没有动，似乎是权威，但解决不了。（由于目录结构根据版本不同而不同，可能会影响权限以外的内容）MySQL 5.6和MySQL 5.7（/usr/local/var/mysql/）的初始数据目录结构# MySQL 5.6 $ ls -l /usr/local/var/mysql -rw-rw---- 1 xxx admin 56 7 26 20:54 auto.cnf -rw-r----- 1 xxx admin 0 7 26 20:50 binlog.index -rw-r----- 1 xxx admin 10369 7 27 18:30 xxx.local.err -rw-rw---- 1 xxx admin 5 7 27 18:30 xxx.local.pid -rw-rw---- 1 xxx admin 50331648 7 27 18:30 ib_logfile0 -rw-rw---- 1 xxx admin 50331648 7 26 20:46 ib_logfile1 -rw-rw---- 1 xxx admin 12582912 7 27 18:30 ibdata1 drwx------ 81 xxx admin 2754 7 26 20:46 mysql drwx------ 55 xxx admin 1870 7 26 20:46 performance_schema # MySQL 8.0 $ ls -l /usr/local/var/mysql_80 -rw-r----- 1 xxx admin 56 7 26 19:44 auto.cnf -rw-r----- 1 xxx admin 178 7 26 19:50 binlog.000001 -rw-r----- 1 xxx admin 11628 7 26 20:42 binlog.000002 -rw-r----- 1 xxx admin 32 7 26 19:51 binlog.index -rw------- 1 xxx admin 1680 7 26 19:44 ca-key.pem -rw-r--r-- 1 xxx admin 1112 7 26 19:44 ca.pem -rw-r----- 1 xxx admin 2783 7 26 20:42 xxx.local.err -rw-r----- 1 xxx admin 6 7 26 19:51 xxx.local.pid -rw-r--r-- 1 xxx admin 1112 7 26 19:44 client-cert.pem -rw------- 1 xxx admin 1676 7 26 19:44 client-key.pem -rw-r----- 1 xxx admin 3346 7 26 20:42 ib_buffer_pool -rw-r----- 1 xxx admin 50331648 7 26 20:42 ib_logfile0 -rw-r----- 1 xxx admin 50331648 7 26 19:44 ib_logfile1 -rw-r----- 1 xxx admin 12582912 7 26 20:42 ibdata1 drwxr-x--- 8 xxx admin 272 7 26 19:44 mysql -rw-r----- 1 xxx admin 25165824 7 26 20:19 mysql.ibd drwxr-x--- 104 xxx admin 3536 7 26 19:44 performance_schema -rw------- 1 xxx admin 1680 7 26 19:44 private_key.pem -rw-r--r-- 1 xxx admin 452 7 26 19:44 public_key.pem -rw-r--r-- 1 xxx admin 1112 7 26 19:44 server-cert.pem -rw------- 1 xxx admin 1676 7 26 19:44 server-key.pem drwxr-x--- 3 xxx admin 102 7 26 19:44 sys -rw-r----- 1 xxx admin 10485760 7 26 20:42 undo_001 -rw-r----- 1 xxx admin 10485760 7 26 20:42 undo_002]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Homebrew</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac通过brew安装的MySQL各种无法运行问题总结]]></title>
    <url>%2Fposts%2F6965849b.html</url>
    <content type="text"><![CDATA[一、解决 ERROR! The server quit without updating PID file (/usr/local/var/mysql/xxx.local.pid).参考：https://stackoverflow.com/a/36156848问题描述之前用的好好的，经过一次更新（5.6-&gt;8.0）后某一天突然炸了。通过brew services start mysql启动 MySQL 后，使用 Navicat 连接提示：2003 - Can&#39;t connect to MySQL server on &#39;127.0.0.1&#39; (61 &quot;Connection refused&quot;) 经过一番查询，据说是 MySQL 服务没启动的问题（其实我觉得这说法有点不对），然后我就尝试启动MySQL服务，命令mysql.server start。接着我收到以下错误：ERROR! The server quit without updating PID file (/usr/local/var/mysql/xxx.local.pid). xxx为我的机器名字。然后执行mysql_secure_installation又提示：Securing the MySQL server deployment. Enter password for user root: Error: Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2) 后来经过各种尝试如：rm /usr/local/var/mysql/*.err rm /usr/local/var/mysql/xxx.local.err find / -name mysql.sock sudo chmod -R 755 /usr/local/var/mysql/ sudo chown -R _mysql:mysql /usr/local/var/mysql ls -laF /usr/local/var/mysql/ sudo rm -f /tmp/mysql.sock.lock ls -laF /tmp 还有通过ps aux | grep mysql找出 MySQL 的 PID，再用kill -9 [PID]杀掉进程都没用。最终解决方法：重装大法最后尝试完全重新安装 MySQL 终于解决了。警告：这将删除所有数据库，因此请确保先保存转储。brew remove mysql brew cleanup --force launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist sudo rm -rf /usr/local/var/mysql brew install mysql mysqld --initialize --explicit_defaults_for_timestamp mysql.server start # no sudo! 重装了MySQL后建议重新执行一次配置脚本：mysql_secure_installation注意：安装后必须执行mysqld --initialize --explicit_defaults_for_timestamp 否则仍无法解决以下问题：Error: Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2) 附录卸载过程如下（保留以便日后需要）：$ brew remove mysql Uninstalling /usr/local/Cellar/mysql/8.0.11... (254 files, 232.9MB) mysql 5.7.21, 5.7.22 2 are still installed. Remove all versions with `brew uninstall --force mysql`. $ brew uninstall --force mysql Uninstalling mysql... (640 files, 467.8MB) $ brew cleanup --force Removing: /usr/local/Cellar/dash/0.5.10... (6 files, 196.2KB) Removing: /usr/local/Cellar/dash/0.5.9.1... (5 files, 199KB) Removing: /usr/local/Cellar/freetds/1.00.89... (2,094 files, 11.9MB) Removing: /usr/local/Cellar/freetds/1.00.91... (2,094 files, 11.9MB) Removing: /usr/local/Cellar/freetype/2.9... (60 files, 2.7MB) Removing: /usr/local/Cellar/gdbm/1.14.1_1... (20 files, 555.8KB) Removing: /usr/local/Cellar/icu4c/61.1... (249 files, 67.2MB) Removing: /usr/local/Cellar/libidn2/2.0.4... (46 files, 580.8KB) Removing: /usr/local/Cellar/libpq/10.3... (2,425 files, 26.8MB) Removing: /usr/local/Cellar/libunistring/0.9.9... (54 files, 4.4MB) Removing: /usr/local/Cellar/nginx/1.13.12... (23 files, 1.4MB) Removing: /usr/local/Cellar/nginx/1.15.0... (23 files, 1.4MB) Removing: /usr/local/Cellar/node/10.0.0... (5,301 files, 51.7MB) Removing: /usr/local/Cellar/node/10.1.0... (7,283 files, 55.4MB) Removing: /usr/local/Cellar/node/10.2.1... (5,301 files, 51.9MB) Removing: /usr/local/Cellar/node/9.11.1... (5,125 files, 49.7MB) Removing: /usr/local/Cellar/openssl/1.0.2n... (1,792 files, 12.3MB) Removing: /usr/local/Cellar/openssl/1.0.2o_1... (1,791 files, 12.3MB) Removing: /usr/local/Cellar/php/7.2.5... (515 files, 78.9MB) Removing: /usr/local/Cellar/php/7.2.6... (515 files, 78.9MB) Removing: /usr/local/Cellar/php@5.6/5.6.35_1... (498 files, 63.8MB) Removing: /usr/local/Cellar/php@5.6/5.6.36... (498 files, 63.8MB) Removing: /usr/local/Cellar/php@7.0/7.0.29_1... (502 files, 65.5MB) Removing: /usr/local/Cellar/php@7.0/7.0.30... (502 files, 65.5MB) Removing: /usr/local/Cellar/python/3.6.5... (4,794 files, 99.9MB) Removing: /usr/local/Cellar/readline/7.0.3_1... (46 files, 1.5MB) Removing: /usr/local/Cellar/sqlite/3.23.1... (11 files, 3MB) Removing: /usr/local/Cellar/webp/0.6.1... (38 files, 2MB) Removing: /usr/local/Cellar/wget/1.19.4_1... (50 files, 3.7MB) Removing: /usr/local/Cellar/xz/5.2.3... (92 files, 1.4MB) Removing: /usr/local/Cellar/zsh/5.4.2_3... (1,390 files, 11.8MB) Removing: /Users/seal/Library/Caches/Homebrew/dash-0.5.10.sierra.bottle.tar.gz... (83.6KB) Removing: /Users/seal/Library/Caches/Homebrew/dash-0.5.9.1.sierra.bottle.tar.gz... (83.2KB) Removing: /Users/seal/Library/Caches/Homebrew/freetds-1.00.89.sierra.bottle.tar.gz... (2.3MB) Removing: /Users/seal/Library/Caches/Homebrew/freetds-1.00.91.sierra.bottle.tar.gz... (2.3MB) Removing: /Users/seal/Library/Caches/Homebrew/freetype-2.9.sierra.bottle.1.tar.gz... (896.8KB) Removing: /Users/seal/Library/Caches/Homebrew/gdbm-1.14.1_1.sierra.bottle.tar.gz... (182.5KB) Removing: /Users/seal/Library/Caches/Homebrew/icu4c-61.1.sierra.bottle.tar.gz... (25.4MB) Removing: /Users/seal/Library/Caches/Homebrew/libidn2-2.0.4.sierra.bottle.tar.gz... (190.4KB) Removing: /Users/seal/Library/Caches/Homebrew/libpq-10.3.sierra.bottle.tar.gz... (6MB) Removing: /Users/seal/Library/Caches/Homebrew/libunistring-0.9.9.sierra.bottle.tar.gz... (1.4MB) Removing: /Users/seal/Library/Caches/Homebrew/mysql-5.7.21.sierra.bottle.tar.gz... (72.2MB) Removing: /Users/seal/Library/Caches/Homebrew/mysql-5.7.22.sierra.bottle.tar.gz... (72.2MB) Removing: /Users/seal/Library/Caches/Homebrew/nginx-1.13.12.sierra.bottle.tar.gz... (570.5KB) Removing: /Users/seal/Library/Caches/Homebrew/nginx-1.15.0.sierra.bottle.tar.gz... (572.6KB) Removing: /Users/seal/Library/Caches/Homebrew/node-10.0.0.sierra.bottle.tar.gz... (13.7MB) Removing: /Users/seal/Library/Caches/Homebrew/node-10.1.0.sierra.bottle.tar.gz... (13.7MB) Removing: /Users/seal/Library/Caches/Homebrew/node-10.2.1.sierra.bottle.tar.gz... (13.8MB) Removing: /Users/seal/Library/Caches/Homebrew/node-9.11.1.sierra.bottle.tar.gz... (13.3MB) Removing: /Users/seal/Library/Caches/Homebrew/openssl-1.0.2n.sierra.bottle.tar.gz... (3.7MB) Removing: /Users/seal/Library/Caches/Homebrew/openssl-1.0.2o_1.sierra.bottle.tar.gz... (3.7MB) Removing: /Users/seal/Library/Caches/Homebrew/php-7.2.4_1.sierra.bottle.tar.gz... (21.6MB) Removing: /Users/seal/Library/Caches/Homebrew/php-7.2.5.sierra.bottle.tar.gz... (21.6MB) Removing: /Users/seal/Library/Caches/Homebrew/php-7.2.6.sierra.bottle.tar.gz... (21.6MB) Removing: /Users/seal/Library/Caches/Homebrew/php@5.6-5.6.35_1.sierra.bottle.tar.gz... (19.4MB) Removing: /Users/seal/Library/Caches/Homebrew/php@5.6-5.6.36.sierra.bottle.tar.gz... (19.4MB) Removing: /Users/seal/Library/Caches/Homebrew/php@7.0-7.0.29_1.sierra.bottle.tar.gz... (20MB) Removing: /Users/seal/Library/Caches/Homebrew/php@7.0-7.0.30.sierra.bottle.tar.gz... (20MB) Removing: /Users/seal/Library/Caches/Homebrew/php@7.1-7.1.16_1.sierra.bottle.tar.gz... (20.5MB) Removing: /Users/seal/Library/Caches/Homebrew/python-3.6.5.sierra.bottle.1.tar.gz... (21.9MB) Removing: /Users/seal/Library/Caches/Homebrew/readline-7.0.3_1.sierra.bottle.tar.gz... (497.3KB) Removing: /Users/seal/Library/Caches/Homebrew/sqlite-3.23.1.sierra.bottle.tar.gz... (1.4MB) Removing: /Users/seal/Library/Caches/Homebrew/tomcat-9.0.6.tar.gz.incomplete... (572KB) Removing: /Users/seal/Library/Caches/Homebrew/webp-0.6.1.sierra.bottle.1.tar.gz... (809.1KB) Removing: /Users/seal/Library/Caches/Homebrew/wget-1.19.4_1.sierra.bottle.tar.gz... (1.3MB) Removing: /Users/seal/Library/Caches/Homebrew/xz-5.2.3.sierra.bottle.tar.gz... (462.1KB) Removing: /Users/seal/Library/Caches/Homebrew/zsh-5.4.2_3.sierra.bottle.tar.gz... (3.3MB) Removing: /Users/seal/Library/Logs/Homebrew/apr... (68B) Removing: /Users/seal/Library/Logs/Homebrew/apr-util... (68B) Removing: /Users/seal/Library/Logs/Homebrew/argon2... (68B) Removing: /Users/seal/Library/Logs/Homebrew/aspell... (68B) Removing: /Users/seal/Library/Logs/Homebrew/autoconf... (68B) Removing: /Users/seal/Library/Logs/Homebrew/brew-php-switcher... (119B) Removing: /Users/seal/Library/Logs/Homebrew/dash... (68B) Removing: /Users/seal/Library/Logs/Homebrew/freetds... (68B) Removing: /Users/seal/Library/Logs/Homebrew/freetype... (68B) Removing: /Users/seal/Library/Logs/Homebrew/gdbm... (68B) Removing: /Users/seal/Library/Logs/Homebrew/gettext... (68B) Removing: /Users/seal/Library/Logs/Homebrew/glib... (68B) Removing: /Users/seal/Library/Logs/Homebrew/gmp... (68B) Removing: /Users/seal/Library/Logs/Homebrew/icu4c... (68B) Removing: /Users/seal/Library/Logs/Homebrew/jpeg... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libffi... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libidn2... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libpng... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libpq... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libsodium... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libtool... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libunistring... (68B) Removing: /Users/seal/Library/Logs/Homebrew/libzip... (68B) Removing: /Users/seal/Library/Logs/Homebrew/mcrypt... (68B) Removing: /Users/seal/Library/Logs/Homebrew/mhash... (68B) Removing: /Users/seal/Library/Logs/Homebrew/mysql... (1.3KB) Removing: /Users/seal/Library/Logs/Homebrew/nginx... (68B) Removing: /Users/seal/Library/Logs/Homebrew/node... (68B) Removing: /Users/seal/Library/Logs/Homebrew/openssl... (68B) Removing: /Users/seal/Library/Logs/Homebrew/pcre... (68B) Removing: /Users/seal/Library/Logs/Homebrew/php... (12 files, 2.3KB) Removing: /Users/seal/Library/Logs/Homebrew/php@5.6... (12 files, 2.4KB) Removing: /Users/seal/Library/Logs/Homebrew/php@7.0... (12 files, 2.9KB) Removing: /Users/seal/Library/Logs/Homebrew/php@7.1... (12 files, 2.4KB) Removing: /Users/seal/Library/Logs/Homebrew/python... (3 files, 127.8KB) Removing: /Users/seal/Library/Logs/Homebrew/readline... (68B) Removing: /Users/seal/Library/Logs/Homebrew/sqlite... (68B) Removing: /Users/seal/Library/Logs/Homebrew/tomcat... (68B) Removing: /Users/seal/Library/Logs/Homebrew/tomcat@8... (110B) Removing: /Users/seal/Library/Logs/Homebrew/unixodbc... (68B) Removing: /Users/seal/Library/Logs/Homebrew/webp... (68B) Removing: /Users/seal/Library/Logs/Homebrew/wget... (68B) Removing: /Users/seal/Library/Logs/Homebrew/xz... (68B) Removing: /Users/seal/Library/Logs/Homebrew/zsh... (68B) Removing: /Users/seal/Library/Logs/Homebrew/zsh-completions... (117B) ==&gt; This operation has freed approximately 1.3GB of disk space.]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Homebrew</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上使用brew安装MySQL]]></title>
    <url>%2Fposts%2Fe87d9191.html</url>
    <content type="text"><![CDATA[参考：https://segmentfault.com/q/1010000000475470安装brew install mysql 开启MySQL通过brewbrew services start mysql 或mysql.server start 使用MySQL的配置脚本（MySQL 提供的配置向导）mysql_secure_installation # 完整路径 /usr/local/opt/mysql/bin/mysql_secure_installation 启动这个脚本后，即可根据如下命令提示进行初始化设置：$ mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we&#39;ll need the current password for the root user. If you&#39;ve just installed MySQL, and you haven&#39;t set the root password yet, the password will be blank, so you should just press enter here. # 输入当前root密码，一般为空 Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL root user without the proper authorisation. # 首次使用自带配置脚本，设置root密码 Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. # 是否删除匿名用户 Remove anonymous users? [Y/n] y ... Success! Normally, root should only be allowed to connect from &#39;localhost&#39;. This ensures that someone cannot guess at the root password from the network. # 是否禁止远程登录 Disallow root login remotely? [Y/n] y ... Success! By default, MySQL comes with a database named &#39;test&#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. # 是否删除测试数据库，并登录 Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. # 是否重新载入权限表 Reload privilege tables now? [Y/n] y ... Success! All done! If you&#39;ve completed all of the above steps, your MySQL installation should now be secure. Thanks for using MySQL! Cleaning up... 5.6版本和8.0版本的有点不一样，8.0版似乎有个密码安全检测插件。下面是8.0版本的：$ mysql_secure_installation Securing the MySQL server deployment. Connecting to MySQL using a blank password. Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD PLUGIN can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin? # 是否采用mysql密码安全检测插件（这里我选择了是，密码检查插件要求密码复杂程度高，大小写字母+数字+字符等） Press y|Y for Yes, any other key for No: y There are three levels of password validation policy: LOW Length &gt;= 8 MEDIUM Length &gt;= 8, numeric, mixed case, and special characters STRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary file # 根据上面提示选择密码强度 Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2 # 首次使用自带配置脚本，设置root密码 Please set the password for root here. New password: Re-enter new password: Estimated strength of the password: 100 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. # 是否删除匿名用户 Remove anonymous users? (Press y|Y for Yes, any other key for No) : y Success. Normally, root should only be allowed to connect from &#39;localhost&#39;. This ensures that someone cannot guess at the root password from the network. # 是否禁止远程登录 Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y Success. By default, MySQL comes with a database named &#39;test&#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. # 是否删除测试数据库，并登录 Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. # 是否重新载入权限表 Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y Success. All done! 停止MySQLbrew services stop mysql]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Homebrew</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BCompare破解方法（全平台）]]></title>
    <url>%2Fposts%2Fbfc4a775.html</url>
    <content type="text"><![CDATA[Who am I? Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Material主题源码的一些小修改（修复Bug？）]]></title>
    <url>%2Fposts%2F832fa05b.html</url>
    <content type="text"><![CDATA[一、插件hexo-prism-plugin实现代码高亮导致的行号不显示问题从官方文档我们可以看到md主题支持的代码高亮方式：由于我使用的是1.4.0稳定版（时间20180722），所以只能使用 hexo-prism-plugin 插件，具体用法官方文档讲的很详细我就不多说了。敲黑板，重点重点！！！我在这里主要说一下1.4.0版的md主题对 hexo-prism-plugin 插件似乎不太兼容。这是我的 prism 插件配置：prism_plugin: mode: &#39;preprocess&#39; # realtime/preprocess theme: &#39;solarizedlight&#39; line_number: true # default false 再给你们看一下截图：是不是感觉有什么不对劲？？相信看到这里大家应该都知道什么回事了，line_number我设置为true表示我开了行号显示，那么问题来了，我们的行号呢？还有那个诡异的竖线是什么鬼？于是我用chrome的开发者模式调试了一下，发现了一个很眼熟的CSS属性——padding。如图：这里给没学过编程的同学科普一下padding是什么意思：先放个W3School的链接压压惊= =：CSS padding 属性padding定义和用法：padding 简写属性在一个声明中设置所有内边距属性。例：padding:10px; 类似于这种的意思就是上下左右四个内边距都是 10px。那么内边距又是什么东西呢？看图：所以内边距的意思就是组件的内容到边框的距离。内边距的改变不会影响整个组件的大小，但是会影响组件内容的显示大小废话就不多说了…..我的直觉告诉我就是它的锅，我们现在来把它去掉试试！Unbelievable! 行号出现了！但是在Chrome的开发者模式改只是临时的，刷新就回到原来的样子了，我们要去主题的源代码修改。经过一番查找终于找到了相关代码所在的文件hexo根目录/themes/material/source/css/style.min.css注意：是style.min.css这个压缩过的css文件，而不是style.css！！打开style.min.css，查找padding:1pc或者#post-content pre都OK，然后把padding:1pc;注释掉即可。如图：二、文章结尾添加版权声明参考：http://tianma.space/post/1810369046/index.html现在是版权时代，很多博主都会在文章结尾出写上诸如“转载请保留声明信息”之类的。下面我来说下如何在 Hexo 中添加版权声明。这里我拿 Material 主题作为例子，其他主题可参考后自行修改。自定义字段：考虑到有些博文可能是不需要版权声明的，比如转载、翻译之类的，所以自定义 post_license 作为开关：主题配置文件 _config.yml 中添加字段，作为总开关： post_license: enable: true # or false 文章的 Front-matter 中添加字段，作为独立开关： post_license: true # or false 创建 material/layout/_partial/post_license.ejs: &lt;div&gt; &lt;br/&gt; &lt;ul id=&quot;post-license&quot; class=&quot;post-license&quot;&gt; &lt;li class=&quot;post-license-author&quot;&gt; &lt;strong&gt;本文作者：&lt;/strong&gt; &lt;a href=&quot;&lt;%= config.url %&gt;&quot;&gt;&lt;%= theme.author %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-license-link&quot;&gt; &lt;strong&gt;本文链接：&lt;/strong&gt; &lt;a href=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;%= page.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-license-statement&quot;&gt; &lt;strong&gt;版权声明： &lt;/strong&gt; 本文由 &lt;%= config.author %&gt; 原创，采用 &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh&quot; rel=&quot;license&quot; target=&quot;_blank&quot;&gt;署名-非商业性使用-相同方式共享（CC BY-NC-SA）4.0 国际许可协议&lt;/a&gt; &lt;/br&gt;转载请保留以上声明信息！ &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 在 material/layout/_partial/post-content.ejs 引入 post_license.ejs: &lt;% if(theme.post_license.enable &amp;&amp; page.post_license !== false){%&gt; &lt;%- partial(&#39;_partial/post_license&#39;) %&gt; &lt;% } %&gt; 在 material/source/css/style.min.css 中添加 版权声明 样式： #post-license { margin: 2em 0 0; padding: 0.5em 1em; border-left: 3px solid #ff4081; background-color: #f9f9f9; list-style: none; } 三、Disqus延迟加载☆☆ 2018-08-11 更新：Material主题1.5.6版本开始disqus_click自带延迟加载 ☆☆参考：https://blog.itswincer.com/posts/e5d13eb/先讲下考虑延迟加载的初衷：好吧，其实是因为在大局域网内没法做到所有用户都能看评论，如果加载不出评论就会有一段时间在下方显示白块，强迫症的我怎么能忍受？？！！于是我就想把评论功能设计成网络好的话就自动显示评论，否则需要手动点击。正好看到网上有，于是就借鉴了。然后说下原理：原理嘛，先用 ajax 异步发送一个 get 请求至 Disqus 服务器，接收成功则屏蔽按钮，加载评论；超时则自动断开，并显示加载按钮：修改文件位置：&lt;Material主题目录&gt;/layout/_widget/comment/disqus_click/main.ejs&lt;div class=&quot;btn_click_load&quot;&gt; &lt;button class=&quot;disqus_click_btn&quot;&gt;&lt;%= __(&#39;post.comments_load_button&#39;) %&gt;&lt;/button&gt; &lt;/div&gt; &lt;!-- &lt;script type=&quot;text/ls-javascript&quot; id=&quot;disqus-lazy-load-script&quot;&gt; $(&#39;.btn_click_load&#39;).click(function() { //click to load comments (function() { // DON&#39;T EDIT BELOW THIS LINE var d = document; var s = d.createElement(&#39;script&#39;); s.src = &#39;//&lt;%= theme.comment.shortname %&gt;.disqus.com/embed.js&#39;; s.setAttribute(&#39;data-timestamp&#39;, + new Date()); (d.head || d.body).appendChild(s); })(); $(&#39;.btn_click_load&#39;).css(&#39;display&#39;,&#39;none&#39;); }); &lt;/script&gt; --&gt; &lt;% /* 延迟加载 disqus，timeout 可以自己设置时长 */ %&gt; &lt;script type=&quot;text/javascript&quot; id=&quot;disqus-lazy-load-script&quot;&gt; $.ajax({ url: &#39;https://disqus.com/next/config.json&#39;, timeout: 1000, type: &#39;GET&#39;, success: function(){ var d = document; var s = d.createElement(&#39;script&#39;); s.src = &#39;//&lt;%= theme.comment.shortname %&gt;.disqus.com/embed.js&#39;; s.setAttribute(&#39;data-timestamp&#39;, + new Date()); (d.head || d.body).appendChild(s); $(&#39;.disqus_click_btn&#39;).css(&#39;display&#39;, &#39;none&#39;); }, error: function() { $(&#39;.disqus_click_btn&#39;).css(&#39;display&#39;, &#39;block&#39;); } }); &lt;/script&gt; &lt;% /* 由于我超时时长设置得比较短，所以可能翻墙了还是没有自动加载评论，这时就需要手动点击加载了 */ %&gt; &lt;script type=&quot;text/javascript&quot; id=&quot;disqus-click-load&quot;&gt; $(&#39;.btn_click_load&#39;).click(() =&gt; { //click to load comments (() =&gt; { // DON&#39;T EDIT BELOW THIS LINE var d = document; var s = d.createElement(&#39;script&#39;); s.src = &#39;//&lt;%= theme.comment.shortname %&gt;.disqus.com/embed.js&#39;; s.setAttribute(&#39;data-timestamp&#39;, + new Date()); (d.head || d.body).appendChild(s); })(); $(&#39;.disqus_click_btn&#39;).css(&#39;display&#39;,&#39;none&#39;); }); &lt;/script&gt; 我是把原来的注释掉再加后面的，链接中说超时时间设为300比较短，的确短，我测试了一下，设置为1000就不影响阅读了。注意：改完后记得确认主题配置文件是否启用了disqus_click]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全站开启https总结（艰苦历程？）]]></title>
    <url>%2Fposts%2F41e1ea07.html</url>
    <content type="text"><![CDATA[前言在搭建完Hexo之后，我就开始思考要不要配置https呢？最后深思熟虑，还是决定上https吧！毕竟现在https已经开始普及，像Chrome、Firfox这些浏览器如果不是https协议的会提示如下图，警告“不安全”什么的。强迫症患者表示看着最不舒服了（逃～于是我就开始了配置https之路……SSL证书选取合适的ssl证书https = http + ssl，所以要走https协议首先要申请ssl证书。但是我第一次建站，对ssl证书一点都不懂啊！！哪个ssl证书更好我也不知道，去搜索一翻发现各种说法，最后还是去请教了各位前辈。经过各位前辈的建议，我了解到了Let&#39;s Encrypt，详细介绍我就不说了，这是它在维基百科的资料，然后这是官网除此之外还有Digicert、SSL For Free、CA Cert。Digicert很贵，但是据某位前辈说似乎大企业喜欢用它的挺多，而且人家还支持签发 .onion 域名的证书（EV）。看自己需求吧，我最后还是用了Let&#39;s Encrypt。老父亲说这是免费的，但验证过程要在服务器上做，有点复杂。我觉得复杂点没所谓，好用就行。某群里的前辈说也可以不验证，自签名就好（其实我还没懂哈哈哈，尴尬.jpg）；前辈们还说了一种DNS方式验证，不需要架设额外服务；在我问了“Let’s encrypt用standalone还是webroot模式更好”之后(其实这个我也不懂)，终于决定用DNS模式，DNS 模式更方便，还可以签通配符证书。开始获取SSL证书参考：使用acme.sh脚本的DNS API方式申请及更新let’s encrypt证书群里多位前辈介绍了一个在 Linux 上申请let’s encrypt证书的脚本——acme.shacme.sh脚本Linux服务器下使用acme.sh脚本是申请let’s encrypt证书最便捷的方式，比官方推荐的certbot脚本工具要方便强大的多。好处是对环境要求较低，路由器上 busybox ash 都能跑，只需要使用到 curl 等少数几个外部程序安装文档： https://github.com/Neilpang/acme.sh/wiki/说明前提条件拥有一个域名，例如 mydomain.com (在国内主机的用的话，还需要通过ICP备案)确定二级域名，并且在域名服务器创建一条A记录，执行云主机的公网IP地址。www.mydomain.com指向xxx.xxx.xxx.xxx的IP地址要等到新创建的域名解析能在公网上被解析到。据说国内的域名提供商对letsencrypt的支持非常差，但是据说现阶段用dnspod解析的域名还没碰到问题。我用的是国外的Cloudflare解析我的域名，但是经常被墙（想骂人…），移动表示大多数都没有体验= =，联通情况好一点。安装acme.sh脚本执行一下命令后重新ssh登录服务器即可：curl https://get.acme.sh | sh 该命令会把 acme.sh 安装到你的 home 目录下: ~/.acme.sh/，一般会自动创建环境变量，后期直接命令行输入acme.sh即可。使用DNS API申请证书(推荐配置使用API的方式，否则每隔三个月，仍然需要重新验证DNS TXT记录)创建DNS API的Key及Secret参考：https://github.com/Neilpang/acme.sh/tree/master/dnsapihttps://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.mdacme.sh 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.【例子一】域名由Cloudflare提供解析的网站，使用CloudFlare域名API自动颁发证书以 Cloudflare 为例, 你需要先登录到 Cloudflare 账号才能获得API密钥, 都是免费的。然后在Linux下使用acme.sh命令申请证书:命令使用参考：Linux 下使用 acme.sh 配置 Let’s Encrypt 免费 SSL 证书 + 通配符证书先导入密钥和邮箱： export CF_Key=&quot;sdfsdfsdfljlbjkljlkjsdfoiwje&quot; export CF_Email=&quot;xxxx@sss.com&quot; 我们现在发行一个证书： acme.sh --issue --dns dns_cf -d example.com -d www.example.com --accountemail query@goodsrv.com --accountemail是指定帐户电子邮件，仅对--install和--update-account命令有效（待验证，因为我执行命令时并没有带上该参数）。输入命令后回车，需要等两分钟，终端会有倒计时。倒计时结束后，执行命令： acme.sh --renew -d example.com -d www.example.com 安装证书# 创建安装目录 mkdir /etc/ssl/example.com/ -p # reloadcmd参数里面填写的是在更新证书后需要重新启动的服务，例如重启nginx或者apache或者其它脚本。 acme.sh --installcert -d example.com \ --key-file /etc/ssl/example.com/example.com.key \ --fullchain-file /etc/ssl/example.com/fullchain.cer \ --reloadcmd &quot;systemctl reload nginx&quot; 注意：/etc/ssl/example.com/的所有者以及用户组必须为当前用户，否则后面installcert的时候会提示没有权限，可执行如下命令，后面可更改回原来的所有者和用户组：#更改所有者和用户组 sudo chown $USER:$USER -R /etc/ssl/example.com/ #查看指定文件夹的权限、所有者和用户组 ls -l /etc/ssl/ ls -l /etc/ssl/example.com/ (一个小提醒, 部分服务器系统用的是 service nginx force-reload, 不是 service nginx reload, 据测试, reload 并不会重新加载证书, 所以用的 force-reload)Nginx 的配置 ssl_certificate 使用 /etc/nginx/ssl/fullchain.cer ，而非 /etc/nginx/ssl/&lt;domain&gt;.cer ，否则 SSL Labs的测试会报 Chain issues Incomplete 错误。--installcert命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd 会被自动调用,让服务器生效.值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.mkdir的-p参数解释：-p, –parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;mkdir命令参考：https://www.linuxdaxue.com/linux-command-intro-mkdir.html更新证书目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.更新 acme.sh目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.升级 acme.sh 到最新版 :acme.sh --upgrade 如果你不想手动升级, 可以开启自动升级:acme.sh --upgrade --auto-upgrade 之后, acme.sh 就会自动保持更新了你也可以随时关闭自动更新:acme.sh --upgrade --auto-upgrade 0 应用实例配置Nginx使用证书开通https站点生成Perfect Forward Security（PFS）键值Perfect Forward Security（PFS)是个什么东西，我也不清楚，中文翻译成完美前向保密，反正是这几年才提倡的加强安全性的技术。如果本地还没有生成这个键值，需要先执行生成的命令。/etc/ssl/example.com/ openssl dhparam -out dhparam.pem 2048 生成的过程还挺花时间的，据我查到的资料，据说参数为2048的要4分钟左右，还受服务器性能影响，此时不妨做点其他东西。（时间一分一秒的过去…）好了，PFS键值生成了，我们用ls命令来确认一下目录下是否生成了dhparam.pem文件，确认完毕就可以执行下一步了。特别说明：一定要确认文件是否已经生成！！！在这一步我原本是执行openssl dhparam 2048 -out dhparam.pem，不知道为什么执行了多次都无法生成dhparam.pem文件，后来换了个目录执行了多次openssl dhparam -out dhparam.pem 2048才成功，这是后面配置完Nginx后无法重新启动Nginx服务了，我输出日志才发现的，具体后面会说。nginx配置使用证书。编辑你的Nginx配置文件，如：/etc/nginx/sites-available/&lt;your-nginx-config&gt;☆☆修改配置文件前建议先备份☆☆可以通过Mozilla SSL Configuration Generator自动生成对应的参考配置修改http对应的server模块： server { listen 80; listen [::]:80; server_name example.com; #return 301 https://example.com$request_uri; if ( $scheme = http ){ return 301 https://$server_name$request_uri; } root /var/www/html/example.com; index index.html index.htm; } return 301 https://$server_name$request_uri;是强制http跳转https在配置文件中添加https的server模块： server { listen 443 ssl; server_name example.com; #charset utf-8; location / { root /var/www/html/example.com; #index index.html index.htm; } #root /var/www/html/example.com; index index.html index.htm; access_log /var/log/nginx/example.com_access.log; error_log /var/log/nginx/example.com_error.log; ssl_certificate /etc/ssl/example.com/fullchain.cer; ssl_certificate_key /etc/ssl/example.com/example.com.key; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; ssl_dhparam /etc/ssl/example.com/dhparam.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK&#39;; ssl_prefer_server_ciphers on; } 总的样例内容如下： server { listen 80; listen [::]:80; server_name example.com; #return 301 https://example.com$request_uri; if ( $scheme = http ){ return 301 https://$server_name$request_uri; } root /var/www/html/example.com; index index.html index.htm; } server { listen 443 ssl; server_name example.com; #charset utf-8; location / { root /var/www/html/example.com; #index index.html index.htm; } #root /var/www/html/example.com; index index.html index.htm; access_log /var/log/nginx/example.com_access.log; error_log /var/log/nginx/example.com_error.log; ssl_certificate /etc/ssl/example.com/fullchain.cer; ssl_certificate_key /etc/ssl/example.com/example.com.key; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; ssl_dhparam /etc/ssl/example.com/dhparam.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK&#39;; ssl_prefer_server_ciphers on; } 配置文件没有问题的话执行systemctl reload nginx，然后在浏览器打开http://example.com, 如果正常跳转到https://example.com，就算成功了。 如果是chrome浏览器，在地址栏点击绿色小锁的图标，可以查看证书的详情，如图。此步骤遇到的难题这里要注意的是如果你是Nginx+Cloudflare，那么Cloudflare的”Crypto—SSL”要设置成Full(strict)，否则会导致example.com将你重定向次数过多的情况，默认是Flexible。CF设置如图：这里还有个坑就是前面说的无法生成dhparam.pem文件导致无法重载Nginx。一开始我还没发现，一直在以为Nginx配置文件哪里错了，后来sudo journalctl -xe输出日志才发现Nginx找不到dhparam.pem文件：用ls命令可以发现目录下并不存在dhparam.pem文件：于是我又执行了几次openssl dhparam 2048 -out dhparam.pem，结果还是一样，而且过程竟然只需要1分钟不到。如图：察觉到不对劲之后我马上去找了跟dhparam的资料，后来在一个博客上发现他的命令顺序跟我不一样，这个文件存放目录也跟我不一样，于是我就把命令改成openssl dhparam -out dhparam.pem 2048和改目录到example.com(此时该目录权限还是$USER的)再试了几次，第一次是不行的，执行多几次后突然就成功了。如图：可以发现此次执行命令时间十分的长，我等了大概5分钟才执行完毕。然后我们再用ls来看看目录下的文件，可以发现文件已经生成：测试证书如果是网站的话，可以使用第三方网站工具测试自己网站的HTTPS配置的安全性SSL Lab就是个不错的选择：https://ssllabs.com/ssltest/analyze.html?d=example.com这是我的测试结果，都是A哦！！也可以在Linux下使用openssl命令查看证书的过期时间 openssl x509 -noout -dates -in /etc/ssl/example.com/example.com.key]]></content>
      <categories>
        <category>运维日志</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>服务器</tag>
        <tag>Linux</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一次搭建Hexo博客过程 in MacOS]]></title>
    <url>%2Fposts%2F1572acec.html</url>
    <content type="text"><![CDATA[第一次在自己服务器搭建博客，总会有那么一点点失误，碰到一点坑，在这里总结一下搭建hexo的具体步骤。参考：Hexo之旅(二)：Hexo博客搭建(在 Mac OS 平台)如何在服务器上搭建hexo博客Hexo架构首先我们要理解hexo是如何生成静态博客以及如何实现通过服务器访问静态博客的通过上图我们可以知道，整个流程就是在本地通过 hexo g 渲染博客的静态文件，然后通过 hexo d 把静态文件 push到服务器上我们自己创建的git仓库,服务器再通过 git-hooks 同步网站根目录，这样就可以访问了配置本地环境安装依赖Hexo 依赖于 Node.js 和 Git，需要先安装。安装GitGit安装（廖雪峰教程）安装Node.jsNode的话建议用nvm管理，否则很容易出现 command not found: hexo 的情况，出现这种情况主要是node的版本问题 可以通过nvm来控制一下node的版本来解决参考：Hexo安装后hexo指令无法被找到的解决方法使用Homebrew安裝nvmbrew install nvm //这个过程中可能需要安装gcc或者其它需要依赖的工具 按照提示一次安装好即可 mkdir ~/.nvm echo &quot;export NVM_DIR=~/.nvm&quot; &gt;&gt; .bash_profile echo &quot;. $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile //这个步骤中mac下的brew需要通过--prefix这种形式完成，如果是zsh的话可以输出到.zshrc文件 重启终端后用 nvm help 来验证nvm是否正确安装使用nvm安裝Node.js安裝完了nvm，接著安裝主角 Node.js。先用 nvm ls-remote 指令看一下有哪些版本可以安裝： nvm ls-remote . . . v9.10.0 v9.10.1 v9.11.0 v9.11.1 v9.11.2 v10.0.0 v10.1.0 v10.2.0 v10.2.1 v10.3.0 v10.4.0 . . . 然后直接用一下命令安装最新稳定版nodenvm install stable 使用nvm无痛切换Node.js版本检查当前使用的 Node.js 版本使用命令 nvm ls。如果输出结果如下表示正确：$ nvm ls v0.12.10 -&gt; v10.6.0 system default -&gt; v10.6.0 node -&gt; stable (-&gt; v10.6.0) (default) stable -&gt; 10.6 (-&gt; v10.6.0) (default) iojs -&gt; N/A (default) lts/* -&gt; lts/carbon (-&gt; N/A) lts/argon -&gt; v4.9.1 (-&gt; N/A) lts/boron -&gt; v6.14.3 (-&gt; N/A) lts/carbon -&gt; v8.11.3 (-&gt; N/A) 第一个 -&gt; 表示当前使用的版本，default -&gt; 表示默认版本，必须保证这两个，不然后面安装hexo会提示 -bash: hexo: command not found ，不能在命令行使用。设置的方法是，先通过 nvm ls 看看本地安装了什么版本，如果本地没有，则应该使用上一步的方法先安装，然后执行这个命令指定版本：nvm use v10.6.0 再通过这个命令指定默认版本：nvm alias default v10.6.0 部署Hexo安装Hexo所有必备的依赖都安装完成后，即可使用 npm 安装 Hexo：npm install -g hexo-cli -g 或 –global 表示全局安装模块，如果没有这个参数，会安装在当前目录的node_modules子目录下。安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。hexo init &lt;folder&gt; cd &lt;folder&gt; npm install npm install 表示安装当前目录package.json文件中配置的dependencies模块。更新 Hexo官方发布了新版本后，可以在Hexo建立的博客目录内运行：npm update 用如下命令可以检查package.json文件中配置的dependencies的版本号：npm ls --depth=0 安装 Hexo 插件npm install &lt;module&gt; --save 下面是一些可选插件的安装npm i hexo-all-minifier --save npm install hexo-admin --save npm install hexo-generator-archive --save npm install hexo-generator-tag --save npm install hexo-generator-feed --save npm install hexo-wordcount --save npm install hexo-helper-qrcode --save npm install hexo-generator-search --save npm install hexo-generator-searchdb --save npm i -S hexo-prism-plugin npm install hexo-abbrlink --save npm install hexo-generator-sitemap --save 配置服务器环境部署 Nginx安装 Nginx &amp;&amp; 启动 Nginx我服务器的Nginx是用Docker部署的，早已经部署好。这步暂时跳过，日后补充…（又偷懒了（逃～配置虚拟主机 &amp;&amp; 创建新的网站目录 &amp;&amp; 创建虚拟主机配置文件同上（逃～部署 Hexo 到服务器Hexo 可以使用 git 方式部署。(网站的目录在下面统一用 &lt;your-website&gt; 代替，如你的目录在 /var/www/html ，那就用 /var/www/html 替换 &lt;your-website&gt; )创建空白 git 仓库，并且设置 git hookcd ~ mkdir blog_hexo.git &amp;&amp; cd blog_hexo.git git init --bare 新建 post-receive 脚本cd hooks touch post-receive 编辑 ~/blog_hexo.git/hooks/post-receive 脚本#!/bin/bash GIT_REPO=/home/xxx/blog_hexo.git TMP_GIT_CLONE=/tmp/HexoBlog PUBLIC_WWW=&lt;your-website&gt; rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予脚本执行权限chmod 755 post-receive //或 chmod +x post-receive 注意：这里要先确保 &lt;your-website> 目录下没有任何文件。备份好文件后执行一下命令：sudo rm -rf &lt;your-website&gt;/* 执行 ls -l &lt;your-website&gt; 命令检查该目录及其子目录（文件）所有者和用户组是否为你当前使用的用户。若显示：drwxr-xr-x 2 root root 4096 Jun 4 07:00 &lt;your-website&gt; 则说明你的网站目录的所有者以及用户组都是root，那么当你用git-hooks把tmp目录的静态博客拷贝到 &lt;your-website&gt; 时，会由于没有权限而导致拷贝失败，所以我们需要把的所有者和用户组都改为你当前使用的用户。执行以下命令即可：sudo chown $USER:$USER -R &lt;your-website&gt; 配置本机在博客目录下运行下面命令，安装 git 部署插件。npm install hexo-deployer-git --save 修改博客的配置文件 _config.yml，修改deploy选项：deploy: type: git message: update repo: xxx@127.0.0.1:/home/xxx/blog_hexo.git branch: master 然后运行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 即可部署本地渲染网页到服务器上，之后只需要访问额你的域名就可以访问你的hexo博客啦！如我的博客是 reb.mallotec.com注：请把127.0.0.1替换成自己服务器的ip附：Hexo 个性化–&gt;NexT主题参考：Hexo之旅(三)：Hexo博客个性化及NexT主题配置文档NexT 主题提供了详细的 使用文档 。下载主题主题的安装很简单，执行以下命令即可：cd your-hexo-folder mkdir themes/next curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d &#39;&quot;&#39; -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1 或cd your-hexo-site git clone https://github.com/iissnan/hexo-theme-next themes/next 启用 NexT 主题克隆/下载 完成后，打开 站点配置文件，找到theme字段，并将其值更改为next。这里注意区分两个配置文件：站点配置文件：是你的 hexo 博客目录下面的 _config.yml 文件。主题配置文件：是 themes/next 目录下的 _config.yml 文件。验证主题是否启用（这步我没执行过= =）运行hexo s --debug，并访问http://localhost:4000，确保站点正确运行。重新渲染博客启用主题后最好重新渲染一遍博客，命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
        <tag>个人经验</tag>
      </tags>
  </entry>
</search>
